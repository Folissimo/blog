// Generated by CoffeeScript 1.6.3
(function() {
  var Twitter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g,
    evaluate: /\{\[(.+?)\]\}/g
  };

  Twitter = (function() {
    function Twitter(config) {
      this.getTweetAge = __bind(this.getTweetAge, this);
      this.renderTweet = __bind(this.renderTweet, this);
      this.renderOverall = __bind(this.renderOverall, this);
      this.getTweetData = __bind(this.getTweetData, this);
      this.defs = {
        destination: $('.latestTweets'),
        connectionError: 'Connection Error - couldn\'t get tweets',
        twitterUrl: 'http://admin.folissimo.com/json/latestTweets.php',
        textOnly: false,
        title: '<h3><a href="http://twitter.com/{{screen_name}}">Latest Tweets</a></h3>',
        container: '<ul class="tweets"></ul>',
        tweetRow: '<li class="tweetRow"><span>{{ tweet }}</span><span class="tweetTime">{{ age }}</span></li>',
        callback: function(tweetData) {},
        userid: 1
      };
      $.extend(this.defs, config);
      this.getTweetData();
    }

    Twitter.prototype.getTweetData = function() {
      return $.getJSON(this.defs.twitterUrl + '?callback=?', {
        userid: this.defs.userid
      }, this.renderOverall);
    };

    Twitter.prototype.renderOverall = function(json) {
      var $title, $tweetContainer,
        _this = this;
      if ((json[0] == null) || !json[0]) {
        return this.defs.destination.append('<div />').text(this.defs.connectionError);
      }
      $title = $(_.template(this.defs.title, json[0].user));
      $tweetContainer = $(this.defs.container);
      _.each(json, function(tweet) {
        return _this.renderTweet(tweet, $tweetContainer);
      });
      this.defs.destination.append($title).append($tweetContainer);
      if (this.defs.callback != null) {
        return this.defs.callback();
      }
    };

    Twitter.prototype.renderTweet = function(tweet, $container) {
      var $tweet, data;
      data = {
        tweet: tweet.text
      };
      data.age = this.getTweetAge(tweet.created_at);
      if (!this.defs.textOnly) {
        data.tweet = data.tweet.replace(/#(\S*)/g, '<a href="http://twitter.com/#!/search/$1">#$1</a>');
        data.tweet = data.tweet.replace(/\@(\S*)/g, '<a href="http://twitter.com/$1">@$1</a>');
      }
      $tweet = $(_.template(this.defs.tweetRow, data));
      $container.append($tweet);
      return $tweet;
    };

    Twitter.prototype.getTweetAge = function(tweetDate) {
      var daysAgo, hoursAgo, minutesAgo, monthsAgo, now, parsedDate, twitterDateFormat;
      twitterDateFormat = 'ddd MMM DD HH:mm:ss Z YYYY';
      parsedDate = moment(tweetDate, twitterDateFormat);
      now = moment();
      minutesAgo = now.diff(parsedDate, 'minutes');
      hoursAgo = now.diff(parsedDate, 'hours');
      daysAgo = now.diff(parsedDate, 'days');
      monthsAgo = now.diff(parsedDate, 'months');
      if (minutesAgo < 60) {
        return minutesAgo + ' mins';
      }
      if (hoursAgo < 24) {
        return hoursAgo + ' hrs';
      }
      if (daysAgo < 14) {
        return daysAgo + ' days';
      }
      return parsedDate.format('D MMM');
    };

    return Twitter;

  })();

  $(document).ready(function() {
    return setTimeout(function() {
      return window.twitterData = new Twitter();
    }, 3);
  });

}).call(this);
